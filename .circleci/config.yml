version: 2.1
orbs:
  k8s: circleci/kubernetes@0.7.0
  slack: circleci/slack@3.4.2
commands:
  git_checkout_from_cache:
    description: "Git checkout and save cache"
    steps:
      - restore_cache:
          name: "Git restore cache"
          keys:
            - source-v{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
            - source-v{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-
            - source-v{{ .Environment.CACHE_VERSION }}-
      - run:
          name: "Fetch git tags"
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" >> ~/.ssh/known_hosts
            # Fetch tags if git cache is present
            if [ -e /home/circleci/project/.git ]
            then
              git fetch origin --tags
            fi
      - checkout
      - run:
          name: "Compress git objects"
          command: git gc
      - save_cache:
          name: Git save cache
          key: source-v{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

  npm_install_from_cache:
    description: "npm install and save cache"
    steps:
      - run:
          name: "Create cache key"
          command: echo $(find . ./packages/ -maxdepth 2 -name package.json -type f -exec md5sum {} \; | sort -n | md5sum | cut -d" " -f1) >> CACHE_KEY1
      - restore_cache:
          keys:
            - node-v{{ .Environment.CACHE_VERSION }}-{{ checksum "CACHE_KEY1" }}
      - run:
          name: "Install npm packages"
          command: |
            npm run bootstrap
            # if [ -d "./node_modules" ]; then
            #   echo "Found cache. Using cached node_modules."
            #   node_modules/lerna/cli.js link
            # else
            #   echo "Could not find cache. Bootstrapping..."
            #   npm run bootstrap
            # fi
      - save_cache:
          name: "Saving node_modules cache"
          key: node-v{{ .Environment.CACHE_VERSION }}-{{ checksum "CACHE_KEY1" }}
          paths:
            # VERIFY_CACHE_FOLDERS_START (DO NOT REMOVE)
            - "node_modules"
            - "packages/account/node_modules"
            - "packages/api/node_modules"
            - "packages/appstore/node_modules"
            - "packages/bot-skeleton/node_modules"
            - "packages/bot-web-ui/node_modules"
            - "packages/cashier/node_modules"
            - "packages/components/node_modules"
            - "packages/core/node_modules"
            - "packages/hooks/node_modules"
            - "packages/cfd/node_modules"
            - "packages/indicators/node_modules"
            - "packages/integration/node_modules"
            - "packages/p2p/node_modules"
            - "packages/reports/node_modules"
            - "packages/shared/node_modules"
            - "packages/stores/node_modules"
            - "packages/trader/node_modules"
            - "packages/translations/node_modules"
            - "packages/utils/node_modules"
            - "packages/analytics/node_modules"
            - "packages/wallets/node_modules"
            # VERIFY_CACHE_FOLDERS_END (DO NOT REMOVE)

  build:
    description: "Build"
    steps:
      - run:
          name: "Build all packages"
          command: npm run build:all

  notify_slack:
    description: "Notify slack"
    steps:
      - slack/status:
          include_project_field: false
          failure_message: "Release failed for app.deriv.com with version *$(cat packages/core/dist/version)*"
          success_message: "Release succeeded for app.deriv.com with version *$(cat packages/core/dist/version)*"
          webhook: ${SLACK_WEBHOOK}

  versioning:
    description: "Version the branch"
    parameters:
      version_name:
        type: string
    steps:
      - attach_workspace:
          at: packages/core/dist
      - run:
          name: Tag
          command: echo "<< parameters.version_name >>-$(date -u +"%Y-%m-%dT%H:%M:%SZ")" > packages/core/dist/version


  publish_to_pages_production:
    description: "Publish to cloudflare pages"
    steps:
      - run:
          name: "Publish to cloudflare pages (production)"
          command: |
            npm i wrangler@3.1.0
            cd packages/core
            npx wrangler pages deploy dist/ --project-name=deriv-app-pages --branch=main
            echo "New website - http://cf-pages-deriv-app.deriv.com"

jobs:
  build:
    docker:
      - image: cimg/node:18.16.0
    resource_class: xlarge
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - build

  release_production:
    docker:
      - image: cimg/node:18.16.0
    resource_class: xlarge
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - build
      - versioning:
          version_name: production
      - persist_to_workspace:
          root: packages
          paths:
            - core

      - notify_slack
    environment:
      NODE_ENV: staging

  publish_cloudflare_production:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - attach_workspace:
          at: packages
      - publish_to_pages_production
    environment:
      NODE_ENV: staging

workflows:
  release_production:
    jobs:
      - release_production:
          context: binary-frontend-artifact-upload
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
      - publish_cloudflare_production:
          context: binary-frontend-artifact-upload
          requires:
            - release_production
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
